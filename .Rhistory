saveRDS(STD, "data/STD.rds")
library (readr)
library (dplyr)
#Creating the inputs
varsDisease = c(
"Chlamydia" = "Chlamydia",
"Gonorrhea" = "Gonorrhea",
"Primary and Secondary Syphilis" = "Primary and Secondary Syphilis",
"All" = "All"
)
varsGender = c(
"Male" = "Male",
"Female" = "Female",
"All" = "All"
)
varsAge = c(
"0-14 years" = "0-14",
"15-19 years" = "15-19",
"20-24 years" = "20-24",
"25-29 years" = "25-29",
"30-34 years" = "30-34",
"35-39 years" = "35-39",
"More than 40 years" = "40+",
"All" = "All"
)
varsEthnia = c(
"American Indian or Alaska Native" = "American Indian or Alaska Native",
"Asian or Pacific Islander" = "Asian or Pacific Islander",
"Black or African American" = "Black or African American",
"Hispanic" = "Hispanic" ,
"White" = "White"
)
#Importing STD data
ChlamydiaF <- read_delim("data/ChlamydiaF.txt",
"\t", escape_double = FALSE, col_types = cols(Age = col_character(),
`Age Code` = col_character(), Disease = col_character(),
`Disease Code` = col_skip(), Notes = col_skip(),
Population = col_integer(), `Race/Ethnicity` = col_character(),
`Race/Ethnicity Code` = col_skip(),
Rate = col_skip(), `STD Cases` = col_integer(),
State = col_character(), `State Code` = col_skip(),
Year = col_integer(), `Year Code` = col_skip()),
trim_ws = TRUE)
ChlamydiaF = ChlamydiaF %>% mutate(Gender = "Female", Gender_Code = "F")
ChlamydiaM <- read_delim("data/ChlamydiaM.txt",
"\t", escape_double = FALSE, col_types = cols(Age = col_character(),
`Age Code` = col_character(), Disease = col_character(),
`Disease Code` = col_skip(), Notes = col_skip(),
Population = col_integer(), `Race/Ethnicity` = col_character(),
`Race/Ethnicity Code` = col_skip(),
Rate = col_skip(), `STD Cases` = col_integer(),
State = col_character(), `State Code` = col_skip(),
Year = col_integer(), `Year Code` = col_skip()),
trim_ws = TRUE)
ChlamydiaM = ChlamydiaM %>% mutate(Gender = "Male", Gender_Code = "M")
ChlamydiaU <- read_delim("data/ChlamydiaU.txt",
"\t", escape_double = FALSE, col_types = cols(Age = col_character(),
`Age Code` = col_character(), Disease = col_character(),
`Disease Code` = col_skip(), Notes = col_skip(),
Population = col_integer(), `Race/Ethnicity` = col_character(),
`Race/Ethnicity Code` = col_skip(),
Rate = col_skip(), `STD Cases` = col_integer(),
State = col_character(), `State Code` = col_skip(),
Year = col_integer(), `Year Code` = col_skip()),
trim_ws = TRUE)
ChlamydiaU = ChlamydiaU %>% mutate(Gender = "Unknown", Gender_Code = "U")
GonorrheaF <- read_delim("data/GonorrheaF.txt",
"\t", escape_double = FALSE, col_types = cols(Age = col_character(),
`Age Code` = col_character(), Disease = col_character(),
`Disease Code` = col_skip(), Notes = col_skip(),
Population = col_integer(), `Race/Ethnicity` = col_character(),
`Race/Ethnicity Code` = col_skip(),
Rate = col_skip(), `STD Cases` = col_integer(),
State = col_character(), `State Code` = col_skip(),
Year = col_integer(), `Year Code` = col_skip()),
trim_ws = TRUE)
GonorrheaF = GonorrheaF %>% mutate(Gender = "Female", Gender_Code = "F")
GonorrheaM <- read_delim("data/GonorrheaM.txt",
"\t", escape_double = FALSE, col_types = cols(Age = col_character(),
`Age Code` = col_character(), Disease = col_character(),
`Disease Code` = col_skip(), Notes = col_skip(),
Population = col_integer(), `Race/Ethnicity` = col_character(),
`Race/Ethnicity Code` = col_skip(),
Rate = col_skip(), `STD Cases` = col_integer(),
State = col_character(), `State Code` = col_skip(),
Year = col_integer(), `Year Code` = col_skip()),
trim_ws = TRUE)
GonorrheaM = GonorrheaM %>% mutate(Gender = "Male", Gender_Code = "M")
GonorrheaU <- read_delim("data/GonorrheaU.txt",
"\t", escape_double = FALSE, col_types = cols(Age = col_character(),
`Age Code` = col_character(), Disease = col_character(),
`Disease Code` = col_skip(), Notes = col_skip(),
Population = col_integer(), `Race/Ethnicity` = col_character(),
`Race/Ethnicity Code` = col_skip(),
Rate = col_skip(), `STD Cases` = col_integer(),
State = col_character(), `State Code` = col_skip(),
Year = col_integer(), `Year Code` = col_skip()),
trim_ws = TRUE)
GonorrheaU = GonorrheaU %>% mutate(Gender = "Unknown", Gender_Code = "U")
SyphilisF <- read_delim("data/SyphilisF.txt",
"\t", escape_double = FALSE, col_types = cols(Age = col_character(),
`Age Code` = col_character(), Disease = col_character(),
`Disease Code` = col_skip(), Notes = col_skip(),
Population = col_integer(), `Race/Ethnicity` = col_character(),
`Race/Ethnicity Code` = col_skip(),
Rate = col_skip(), `STD Cases` = col_integer(),
State = col_character(), `State Code` = col_skip(),
Year = col_integer(), `Year Code` = col_skip()),
trim_ws = TRUE)
SyphilisF = SyphilisF %>% mutate(Gender = "Female", Gender_Code = "F")
SyphilisM <- read_delim("data/SyphilisM.txt",
"\t", escape_double = FALSE, col_types = cols(Age = col_character(),
`Age Code` = col_character(), Disease = col_character(),
`Disease Code` = col_skip(), Notes = col_skip(),
Population = col_integer(), `Race/Ethnicity` = col_character(),
`Race/Ethnicity Code` = col_skip(),
Rate = col_skip(), `STD Cases` = col_integer(),
State = col_character(), `State Code` = col_skip(),
Year = col_integer(), `Year Code` = col_skip()),
trim_ws = TRUE)
SyphilisM = SyphilisM %>% mutate(Gender = "Male", Gender_Code = "M")
SyphilisU <- read_delim("data/SyphilisU.txt",
"\t", escape_double = FALSE, col_types = cols(Age = col_character(),
`Age Code` = col_character(), Disease = col_character(),
`Disease Code` = col_skip(), Notes = col_skip(),
Population = col_integer(), `Race/Ethnicity` = col_character(),
`Race/Ethnicity Code` = col_skip(),
Rate = col_skip(), `STD Cases` = col_integer(),
State = col_character(), `State Code` = col_skip(),
Year = col_integer(), `Year Code` = col_skip()),
trim_ws = TRUE)
SyphilisU = SyphilisU %>% mutate(Gender = "Unknown",Gender_Code = "U")
#Combining all the data in one DT for the map
STD = bind_rows (ChlamydiaF, ChlamydiaM, ChlamydiaU, GonorrheaF, GonorrheaM, GonorrheaU, SyphilisF, SyphilisM, SyphilisU)
rm (ChlamydiaF, ChlamydiaM, ChlamydiaU, GonorrheaF, GonorrheaM, GonorrheaU, SyphilisF, SyphilisM, SyphilisU) #Closing the old tables
colnames (STD) = c("Disease", "State", "Year", "Race/Ethnicity", "Age", "Age_Code", "STD_Cases", "Population", "Gender", "Gender_Code")
#Janitoring the data
temp = which (is.na(STD$"Population"))
if (length(temp) != 0) #VÃ©rifiyng that the vector isn't empty
{STD = STD[-c(temp),]}
write.csv(STD, "data/STD.csv")
saveRDS(STD, "data/STD.rds")
runApp('server.R')
runApp('server.R')
runApp('server.R')
library(shiny); runApp('server.R')
runApp('server.R')
View(states)
View(STD1)
View(STD)
test = STD %>% filter(State == "Alabama")
test
test %>% filter(Disease == "Chlamydia")
test = test %>% filter(Disease == "Chlamydia")
test
test = test %>% group_by(Year) %>% summarise (sum(STD_Cases))
test
runApp('server.R')
library(plotly)
plot_ly(plot, x = Year, y = `sum(STD_Cases)`)
plot_ly(test, x = Year, y = `sum(STD_Cases)`)
runApp('server.R')
plot_ly(test, x = "Year", y = "sum(STD_Cases)")
runApp('server.R')
ggplot(test, x = "Year", y = "sum(STD_Cases)")
test
ggplot(test, x = "Year", y = "sum(STD_Cases)")
library(ggplot)
library(ggplot2)
ggplot(test, x = "Year", y = "sum(STD_Cases)")
ggplot(test, x = "Year", y = "sum(STD_Cases)") + geom_bar()
runApp('server.R')
ggplot(test, aes(x = "Year", y = "sum(STD_Cases)")) + geom_bar()
ggplot(test, aes(x = "Year")) + geom_bar()
ggplot(test, aes(x = ~"Year")) + geom_bar()
runApp('server.R')
ggplot(test, aes(x = test$Year)) + geom_bar()
ggplot(test, aes(x = test$Year, y = test$`sum(STD_Cases)`)) + geom_bar()
runApp('server.R')
ggplot(test, aes(x = test$Year, y = test$`sum(STD_Cases)`)) +geom_bar(stat = "identity")
ggplot(test, aes(x = test$Year, y = test$`sum(STD_Cases)`)) +
geom_bar(stat = "identity")
ggplot(test, aes(x = test$Year, y = test$`sum(STD_Cases)`)) +
geom_bar(stat = "identity")+
scale_fill_brewer(palette = "Blues")
ggplot(test, aes(x = test$Year, y = test$`sum(STD_Cases)`, palette = "Blues")) +
geom_bar(stat = "identity")+
scale_fill_brewer(palette = "Blues")
ggplot(test, aes(x = test$Year, y = test$`sum(STD_Cases)`, fill= "Blues")) +
geom_bar(stat = "identity")+
scale_fill_brewer(palette = "Blues")
display.brewer.all()
ggplot(test, aes(x = test$Year, y = test$`sum(STD_Cases)`)) +
geom_bar(stat = "identity")+
scale_fill_brewer(palette = "Blues")
p = ggplot(test, aes(x = test$Year, y = test$`sum(STD_Cases)`)) +
geom_bar(stat = "identity")+
scale_fill_brewer(palette = "Blues")
p
p = ggplot(test, aes(x = test$Year, y = test$`sum(STD_Cases)`)) +
geom_bar(stat = "identity")+
p =scale_fill_brewer(palette = "Blues")
ggplot(test, aes(x = test$Year, y = test$`sum(STD_Cases)`)) +
geom_bar(stat = "identity") +
scale_fill_brewer(palette = "Blues")
ggplot(test, aes(x = test$Year, y = test$`sum(STD_Cases)`, color = "Blues")) +
geom_bar(stat = "identity") +
scale_fill_brewer(palette = "Blues")
ggplot(test, aes(x = test$Year, y = test$`sum(STD_Cases)`)) +
geom_bar(stat = "identity") +
scale_colour_brewer(palette = "Blues")
ggplot(test, aes(x = test$Year, y = test$`sum(STD_Cases)`)) +
geom_bar(stat = "identity") +
scale_colour_brewer()
ggplot(test, aes(x = test$Year, y = test$`sum(STD_Cases)`, colour = clarity)) +
geom_bar(stat = "identity") +
scale_colour_brewer()
ggplot(test, aes(x = test$Year, y = test$`sum(STD_Cases)`)) +
geom_bar(stat = "identity", color = "Blues") +
scale_colour_brewer()
ggplot(test, aes(x = test$Year, y = test$`sum(STD_Cases)`)) +
geom_bar(stat = "identity", color = "Blues") +
scale_colour_brewer()
ggplot(test, aes(x = test$Year, y = test$`sum(STD_Cases)`)) +
geom_bar(stat = "identity", aes(color = "Blues")) +
scale_colour_brewer()
ggplot(test, aes(x = test$Year, y = test$`sum(STD_Cases)`)) +
geom_bar(stat = "identity", aes(color = "clarity")) +
scale_colour_brewer()
ggplot(test, aes(x = test$Year, y = test$`sum(STD_Cases)`)) +
geom_bar(stat = "identity", aes(color = "clarity")) +
scale_colour_brewer()
ggplot(test, aes(x = test$Year, y = test$`sum(STD_Cases)`)) +
geom_bar(stat = "identity", aes(color = "clarity"))
dsamp <- diamonds[sample(nrow(diamonds), 1000), ]
(d <- ggplot(dsamp, aes(carat, price)) +
geom_point(aes(colour = clarity)))
View(dsamp)
(d <- ggplot(test, aes(Year, sum(STD_Cases))) +
geom_point(aes(colour = clarity)))
(d <- ggplot(test, aes(Year, sum(STD_Cases))) +
geom_point(aes(colour = sum(STD_Cases))))
(d <- ggplot(test, aes(Year, sum(STD_Cases))) +
geom_point(aes(colour = "sum(STD_Cases)")))
(d <- ggplot(test, aes(Year, "sum(STD_Cases)")) +
geom_point(aes(colour = "sum(STD_Cases)")))
ggplot(test, aes(x = test$Year, y = test$`sum(STD_Cases)`)) +
geom_bar(stat = "identity", aes(colour = test$`sum(STD_Cases)`))
ggplot(test, aes(x = test$Year, y = test$`sum(STD_Cases)`, colour = test$`sum(STD_Cases)`)) +
geom_bar(stat = "identity", aes())
ggplot(test, aes(x = test$Year, y = test$`sum(STD_Cases)`, fill = test$`sum(STD_Cases)`)) +
geom_bar(stat = "identity", aes())
ggplot(test, aes(x = test$Year, y = test$`sum(STD_Cases)`, fill = test$`sum(STD_Cases)`)) +
geom_bar(stat = "identity")
ggplot(test, aes(x = test$Year, y = test$`sum(STD_Cases)`, fill = test$`sum(STD_Cases)`)) +
geom_bar(stat = "identity")+
scale_colour_brewer(palette = "Greens")
ggplot(test, aes(x = test$Year, y = test$`sum(STD_Cases)`, fill = test$`sum(STD_Cases)`)) +
geom_bar(stat = "identity")
runApp('server.R')
test = STD %>% filter(State == "Alabama")
test = STD %>% filter(Disease == "Chlamydia")
View(test)
test = test %>% group_by(Year) %>%  summarise (sum(STD_Cases))
test
affinefunction = function (a=a, b=b, x=x){
result = ax+b
return (result)
}
runApp('server.R')
test
runApp('server.R')
newRow = data.frame(Year = 2014+i, "sum(STD_Cases)"= affinefunction(a,b,x))
affinefunction = function (a=a, b=b, x=x){
result = a*x+b
return (result)
}
newRow = data.frame(Year = 2014+i, "sum(STD_Cases)"= affinefunction(a,b,x))
runApp('server.R')
View(test)
runApp('server.R')
insertRows (plot,newRow)
runApp('server.R')
runApp('server.R')
plot = STD %>% filter(State == "Alabama") %>% filter(Disease == input$"Chlamydia") %>%
group_by(Year) %>% summarise(sum(STD_Cases))
plot = STD %>% filter(State == "Alabama") %>% filter(Disease == "Chlamydia") %>%
group_by(Year) %>% summarise(sum(STD_Cases))
View(plot)
colnames(plot) = c("Year", "Cases")
a = (plot[19,2]- plot[1,2])/18
b = plot[19,2] - 2014*a
x = input$yearcurve
View(a)
i = 0
for (i in 2019-2014){
newRow = data.frame(Year = 2014+i, Cases= affinefunction(a,b,x))
test = rbind (plot, newRow)
}
for (i in 2019-2014){
newRow = data.frame(Year = 2014+i, Cases= affinefunction(a,b,2014+i))
test = rbind (plot, newRow)
}
View(test)
z = 2019 -2014
for (i in 2014:z){
newRow = data.frame(Year = 2014+i, Cases= affinefunction(a,b,2014+i))
test = rbind (plot, newRow)
}
View(test)
for (i in 2014:2019){
newRow = data.frame(Year = 2014+i, Cases= affinefunction(a,b,2014+i))
test = rbind (plot, newRow)
}
for (i in 2014:2019){
newRow = data.frame(Year = 2014+i, Cases= affinefunction(a,b,2014+i))
test = rbind (plot, newRow)
}
for (i in 2014:2019){
newRow = data.frame(Year = 2014+i, Cases= affinefunction(a,b,2014+i))
test = rbind (plot, newRow)
}
View(test)
newRow = data.frame(Year = 2014+i, Cases= affinefunction(a,b,2014+i))
for (i in 2014:2019){
newRow = data.frame(Year = 2014+i, Cases= affinefunction(a,b,i))
test = rbind (plot, newRow)
}
View(newRow)
for (i in 2014:2019){
newRow = data.frame(Year = i, Cases= affinefunction(a,b,i))
test = rbind (plot, newRow)
}
print i
for (i in 2014:2019){
print (i)
newRow = data.frame(Year = i, Cases= affinefunction(a,b,i))
test = rbind (plot, newRow)
}
for (i in 2014:2019){
print (i)
newRow = data.frame(Year = i, Cases= affinefunction(a,b,i))
test = rbind (plot, newRow)
test
}
test
print (test)
for (i in 2014:2019){
print (i)
newRow = data.frame(Year = i, Cases= affinefunction(a,b,i))
test = rbind (plot, newRow)
print (test)
}
newRow = c(Year = i, Cases= affinefunction(a,b,i))
test = data.frame()
test = test + newRow
newRow = c(Year = i, Cases= affinefunction(a,b,i))
test = data.frame()
rbind(test,newRow)
i = 2014
newRow = c(Year = i, Cases= affinefunction(a,b,i))
test = data.frame()
rbind(test,newRow)
print (test)
newRow = c(Year = i, Cases= affinefunction(a,b,i))
test = data.frame()
test = rbind(test,newRow)
print (test)
newRow = c(Year = i, Cases= affinefunction(a,b,i))
test = data.frame()
test = rbind(test,newRow)
print (test)
i = 2015
newRow = c(Year = i, Cases= affinefunction(a,b,i))
test = data.frame()
test = rbind(test,newRow)
print (test)
print (test)
test[1,] = newRow
print (test)
test[2,] = newRow
print (test)
i = 2015
i = 2015
j = 0
for (i in 2015:2019){
print (i)
newRow = c(Year = i, Cases= affinefunction(a,b,i))
test = data.frame()
j = j+1
test[j,] = newRow
print (test)
}
test = data.frame(Year, Cases)
test = data.frame("Year", "Cases")
View(test)
test = data.frame()
test = data.frame("Test", "Test")
test = data.frame("Test", "Test")
a = (plot[19,2]- plot[1,2])/18
b = plot[19,2] - 2014*a
x = input$yearcurve
i = 2015
j = 0
test = data.frame("Test", "Test")
for (i in 2015:2019){
print (i)
newRow = c(Year = i, Cases= affinefunction(a,b,i))
j = j+1
test[j,] = newRow
}
i = 2015
j = 0
test = data.frame("Test", "Test")
for (i in 2015:2019){
print (i)
newRow = c(Year = i, Cases= affinefunction(a,b,i))
j = j+1
test[j,] = newRow
}
View(a)
test[j,] = newRow
test[j,] = as.numeric(newRow)
View(newRow)
test[j,] = unlist(newRow)
unlist(newRow)
unlist(newRow)
newRow
unlist(newRow)
unlist(newRow)*
newRow = unlist(newRow)
newRow[1,]
newROw
newRow
View(test)
test = data.frame("Test", "Test")
newRow = data.frame(Year = i, Cases= affinefunction(a,b,i))
test[j,] = newRow[1,]
newRow = data.frame(Year = i, Cases= affinefunction(a,b,i))
j = j+1
test[j,] = newRow[1,]
View(newRow)
i = 2015
newRow = data.frame(Year = i, Cases= affinefunction(a,b,i))
View(newRow)
newRow = rbind(newRow, c(i, affinefunction(a,b,i)))
temp = c()
temp2 = c()
for (i in 2015:2019){
temp = c(temp,i)
temp2 = c(temp2, affinefunction(a,b,i))
}
View(temp2)
View(temp4)
unlist(temp2)
temp2 = unlist(temp2)
temp = unlist(temp)
newRows = data.frame(Year = temp, Cases = temp2)
View(newRows)
plot = rbind (plot, newRows)
View(plot)
runApp('server.R')
runApp('server.R')
runApp('server.R')
library(shiny); runApp('server.R')
runApp('server.R')
STD1Pop = STD1 %>% group_by(State) %>% summarise (Population = sum(Population))
runApp('server.R')
meancountrypop = STD %>% filter(Disease == "Chlamydia") %>% filter (Year = "1996") %>%
group_by(Disease) %>% summarise (sum(Population))
meancountrypop = STD %>% filter(Disease == "Chlamydia") %>% filter (Year == "1996") %>%
group_by(Disease) %>% summarise (sum(Population))
View(meancountrypop)
meancountrycases = meancountrycases[1,2]
meancountrypop = meancountrypop[1,2]
meancountrypop
as.numeric(meancountrypop)
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
meancountry = (meancountrycases *1000 ) / meancountrypop
runApp('server.R')
runApp('server.R')
runApp('server.R')
meancountrypop = STD %>% filter(Disease == "Chlamydia") %>% filter (Year == "1996") %>%
group_by(Disease) %>% summarise (sum(Population))
meancountrypop = as.numeric(meancountrypop[1,2])
meancountrycases = STD %>% filter(Disease == "Chlamydia") %>% filter (Year == "1996") %>%
group_by(Disease) %>% summarise (sum(STD_Cases))
meancountrycases = as.numeric(meancountrycases[1,2])
meancountry = (meancountrycases *1000 )/ meancountrypop
for (i in 1:52){
meancountry = c(meancountry, meancountry[1])}
runApp('server.R')
library(shiny); runApp('server.R')
runApp('server.R')
runApp('server.R')
library(shiny); runApp('server.R')
install.packages(shinythemes)
install.packages("shinythemes")
runApp('server.R')
install.packages("DiagrammeR")
runApp('server.R')
library(shiny); runApp('server.R')
library(shiny); runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
