allDisease = rbind(chlamydia , gonorrhea, syphilis)
colnames (allDisease) = c("Disease","State", "State_Code", "Year", "Gender", "Age", "Age_Code", "STD_Cases", "Population")
temp = c(which(allDisease$"Gender" == "Unknown"),
which(allDisease$"Age" == "Unknown"),
which (is.na(allDisease$"Population")))
View(allDisease)
if (length(temp) != 0) #VÃ©rifier que le vecteur n'est pas vide
{allDisease = allDisease[-c(temp),]}
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
allDiseaseWork = allDisease %>% filter (Gender == "Male") %>%
filter (Year == "2000") %>%
filter(Age_Code == "0-14")
allDiseaseWork = allDiseaseWork = allDisease %>% filter (Gender == "Male") %>%
filter (Year == "2000") %>%
filter(Age_Code == "0-14")
View(allDiseaseWork)
allDiseaseWork = allDiseaseWork %>% group_by(State)
View(allDiseaseWork)
allDiseaseWork = allDiseaseWork %>% group_by(State) %>% summary
allDiseaseWork = allDisease
allDiseaseWork = allDisease %>% filter (Gender == "Male") %>%
filter (Year == "2000") %>%
filter(Age_Code == "0-14")
allDiseaseWork = allDiseaseWork %>% group_by(State) %>% sum(STD_Cases)
allDiseaseWork = allDiseaseWork %>% group_by(State) %>% sum("STD_Cases")
allDiseaseWork = allDiseaseWork %>% group_by(State) %>% summarise("STD_Cases")
View(allDiseaseWork)
allDiseaseWork = allDisease
allDiseaseWork = allDisease %>% filter (Gender == "Male") %>%
filter (Year == "2000") %>%
filter(Age_Code == "0-14")
allDiseaseWork = allDiseaseWork %>% group_by(State) %>% summarise()
View(allDiseaseWork)
allDiseaseWork = allDisease
allDiseaseWork = allDisease %>% filter (Gender == "Male") %>%
filter (Year == "2000") %>%
filter(Age_Code == "0-14")
allDiseaseWork = allDiseaseWork %>% group_by(State)
View(allDiseaseWork)
allDiseaseWork = allDiseaseWork %>% group_by(State)
View(allDiseaseWork)
allDiseaseWork = allDiseaseWork %>% group_by("State")
allDiseaseWork = allDiseaseWork %>% group_by(allDiseaseWork$State)
allDiseaseWork = allDiseaseWork %>% group_by(State) %>% summarise(STD_Cases = sum(STD_Cases))
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
library(shiny); runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
#Importing STD data
chlamydia <- read_delim("data/Filtered by genre and state/Chlamydia_without_quotes.txt",
"\t", escape_double = FALSE, col_types = cols(Age = col_character(),
`Age Code` = col_character(), Disease = col_character(),
`Disease Code` = col_skip(), Gender = col_character(),
`Gender Code` = col_character(),
Notes = col_skip(), Population = col_integer(),
`STD Cases` = col_integer(),
State = col_character(), `State Code` = col_integer(),
Year = col_integer(), `Year Code` = col_skip(), `Rate` = col_skip()),
trim_ws = TRUE)
gonorrhea <- read_delim("data/Filtered by genre and state/Gonorrhea_without_quotes.txt",
"\t", escape_double = FALSE, col_types = cols(Age = col_character(),
`Age Code` = col_character(), Disease = col_character(),
`Disease Code` = col_skip(), Gender = col_character(),
`Gender Code` = col_character(),
Notes = col_skip(), Population = col_integer(),
`STD Cases` = col_integer(),
State = col_character(), `State Code` = col_integer(),
Year = col_integer(), `Year Code` = col_skip(), `Rate` = col_skip()),
trim_ws = TRUE)
syphilis<- read_delim("data/Filtered by genre and state/Syphilis_without_quotes.txt",
"\t", escape_double = FALSE, col_types = cols(Age = col_character(),
`Age Code` = col_character(), Disease = col_character(),
`Disease Code` = col_skip(), Gender = col_character(),
`Gender Code` = col_character(),
Notes = col_skip(), Population = col_integer(),
`STD Cases` = col_integer(),
State = col_character(), `State Code` = col_integer(),
Year = col_integer(), `Year Code` = col_skip(), `Rate` = col_skip()),
trim_ws = TRUE)
#Combining all the data in one DT
allDisease = rbind(chlamydia , gonorrhea, syphilis)
View(allDisease)
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
install.packages("mapview")
runApp('server.R')
webshot::install_phantomjs()
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
mapview(m)
mapshot(m, file = test.png)
mapshot(m, file = "test.png")
runApp('server.R')
runApp('server.R')
m
states <- geojsonio::geojson_read("geojson/us-states.json", what = "sp")
m <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf) # A CHANGER
pal <- colorBin("YlOrRd", domain = temp3, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>%g cases in the state",
states$name, temp3
) %>% lapply(htmltools::HTML)
m %>% addPolygons(
fillColor = ~pal(temp3),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~temp3, opacity = 0.7, title = NULL,
position = "bottomright")
npm install leaflet-easyprint
install.packages("F:/DescarteSTD/leaflet-easyPrint-gh-pages.zip", repos = NULL, type = "win.binary")
install.packages("F:/DescarteSTD/leaflet-easyPrint-gh-pages.zip", repos = NULL, type = "win.binary")
temp = states$name
temp2 = allDiseaseWork$State
#Initializing the 3 variables used in the loop
i=1 #Representing the position in the states list
j=1 #Representing the position in our selection list
temp3 = c() #Generating a vector with all of the informations in our list
while (i < 53)
{
if(!is.na(temp [i] == temp2[j])) { #Avoid the error with NA values
if (temp [i] == temp2[j])
{
temp3 = c(temp3,allDiseaseWork[j,"STD_Cases"]) #Saving the value in a vector
i = i+1 #Next step on the state list
j = j+1 #Next step on our selection list
}
}
if(temp [i] != temp2[j] |is.na(temp [i] != temp2[j]))
{
temp3 = c(temp3, 0) #If the state isn't in our filtered list, it has 0 people with the disease
i =i+1 #Next step of the state list
}
}
temp3 =unlist(temp3, use.names=FALSE)
states <- geojsonio::geojson_read("geojson/us-states.json", what = "sp")
m <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf) # A CHANGER
pal <- colorBin("YlOrRd", domain = temp3, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>%g cases in the state",
states$name, temp3
) %>% lapply(htmltools::HTML)
m %>% addPolygons(
fillColor = ~pal(temp3),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~temp3, opacity = 0.7, title = NULL,
position = "bottomright")
m
m=  m %>% addPolygons(
fillColor = ~pal(temp3),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~temp3, opacity = 0.7, title = NULL,
position = "bottomright")
m
mapshot(m, file = "test.png")
runApp('server.R')
runApp('server.R')
hour
hour()
hour(x)
sys.time()
Sys.time()
runApp('server.R')
temp = Sys.time()
str_replace_all(temp, "[[:punct:]]", " ")
library (stringr)
str_replace_all(temp, "[[:punct:]]", " ")
str_replace_all(temp, "  " ")
str_replace (temp, " ", "")
str_replace_all(temp, "[[:punct:]]", " ")
temp =str_replace_all(temp, "[[:punct:]]", " ")
temp = Sys.time()
temp =str_replace_all(temp, "[[:punct:]]", "")
temp =str_replace_all(temp, "[[:punct:]] ", "")
temp = str_replace_all (temp, " ", "")
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
rm(syphilis, gonorrhea, chlamydia )
View(labels)
allDisease = allDisease %>% mutate (Rateonpop = `STD Cases`*100/Population)
########
allDisease= allDisease %>%  group_by(State) %>%  summarise(sum(`STD Cases`))
allDisease = allDiseasesave
########
allDisease= allDisease %>%  group_by(State) %>%  summarise(sum(`STD Cases`, 'Population'))
########
allDisease= allDisease %>%  group_by(State) %>%  summarise(sum(`Population`))
runApp('server.R')
runApp('server.R')
runApp('server.R')
min(allDiseaseWork$STD_Cases)
max(allDiseaseWork$STD_Cases)
minallDiseaseWork =  min(allDiseaseWork$STD_Cases)
minallDiseaseWork =  min(allDiseaseWork$STD_Cases)
maxallDiseaseWork = max(allDiseaseWork$STD_Cases)
stepLegend = (maxallDiseaseWork - minallDiseaseWork) / 10
legendRow = 0
for (i in 1:10)
{
legendRow = c(legendRow, minallDiseaseWork + stepLegend*i)
}
legendRow = ()
legendRow = c()
for (i in 1:10)
{
legendRow = c(legendRow, minallDiseaseWork + stepLegend*i)
}
legendRow
runApp('server.R')
runApp('server.R')
runApp('server.R')
library(shiny); runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
library(shiny); runApp('server.R')
library(shiny); runApp('server.R')
library(shiny); runApp('server.R')
View(allDisease)
View(allDiseasesave)
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
allDisease = allDiseasesave
allDisease = allDisease %>% filter(Disease == "Primary and Secondary Syphilis") %>%
# filter (`Gender Code`== "F") %>%
filter (Year == "1996") %>%
filter(`Age Code` == "0-14")
View(allDisease)
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
library(shiny); runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
library(readr)
AllDiseaseEthnia <- read_delim("data/Filtered by ethnia/AllDiseaseEthnia.txt",
"\t", escape_double = FALSE, col_types = cols(Age = col_character(),
`Age Code` = col_skip(), Disease = col_character(),
`Disease Code` = col_skip(), Gender = col_character(),
`Gender Code` = col_skip(), Notes = col_skip(),
Population = col_integer(), `Race/Ethnicity` = col_character(),
`Race/Ethnicity Code` = col_skip(),
Rate = col_skip(), `STD Cases` = col_integer(),
State = col_character(), `State Code` = col_skip()),
trim_ws = TRUE)
View(AllDiseaseEthnia)
summary (AllDiseaseEthnia)
summary (AllDiseaseEthnia$Gender)
table (AllDiseaseEthnia$Gender)
library(shiny); runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
contingenceTB =c()
contingenceTB[1,1] = "Rien"
contingenceTB = data.frame ("" = c("First Condition", "Second Condition", "Total"),
"Diseased" = c("", "", ""),
"Non Diseased" =c("", "", ""),
"Total" = c("", "", ""))
runApp('server.R')
contingenceTB = data.frame ("Titles" = c("First Condition", "Second Condition", "Total"),
"Diseased" = c("", "", ""),
"Non Diseased" =c("", "", ""),
"Total" = c("", "", ""))
View(contingenceTB)
runApp('server.R')
varsGender[1:3]
varsGender = c(
"Male" = "Male",
"Female" = "Female",
"None" = "None",
"All" = "All"
)
varsGender[1:3]
runApp('server.R')
varsAge
varsAge = c(
"0-14 years" = "0-14",
"15-19 years" = "15-19",
"20-24 years" = "20-24",
"25-29 years" = "25-29",
"30-34 years" = "30-34",
"35-39 years" = "35-39",
"More than 40 years" = "40+",
"None" = "None",
"All" = "All"
)
runApp('server.R')
library(shiny); runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
varsAge[1:7]
runApp('server.R')
AllDiseaseEthnia = AllDiseaseEthnia <- read_delim("data/Filtered by ethnia/AllDiseaseEthnia.txt",
"\t", escape_double = FALSE, col_types = cols(Age = col_character(),
`Age Code` = col_character(), Disease = col_character(),
`Disease Code` = col_skip(), Gender = col_character(),
`Gender Code` = col_skip(), Notes = col_skip(),
Population = col_integer(), `Race/Ethnicity` = col_character(),
`Race/Ethnicity Code` = col_skip(),
Rate = col_skip(), `STD Cases` = col_integer(),
State = col_character(), `State Code` = col_skip()),
trim_ws = TRUE)
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
AllDiseaseEthnia[1,7]
test =AllDiseaseEthnia[1,7]
View(test)
test = as.numeric(test)
runApp('server.R')
contigenceTB [1,2]
#Building the contingence Table
contingenceTB = data.frame ("Titles" = c("First Condition", "Second Condition", "Total"),
"Diseased" = c("", "", ""),
"Non.Diseased" =c("", "", ""),
"Total" = c("", "", ""))
contigenceTB [1,2]
contingenceTB
contingenceTB[1,2]
as.numeric (contingenceTB[1,2])
as.numeric (contingenceTB[1,2]) = 12
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
temp = c(which(allDiseaseEthnia$"Gender" == "Unknown"),
which(allDiseaseEthnia$"Age" == "Unknown"),
which(is.na(allDiseaseEthnia$"Population")),
which(allDiseaseEthnia$"Race/Ethnicity" == "Unknown"))
if (length(temp) != 0) #VÃ©rifiyng that the vector isn't empty
library(shiny); runApp('server.R')
{allDiseaseEthnia = allDiseaseEthnia[-c(temp),]}
allDiseaseEthnia = allDiseaseEthnia <- read_delim("data/Filtered by ethnia/allDiseaseEthnia.txt",
"\t", escape_double = FALSE, col_types = cols(Age = col_character(),
`Age Code` = col_character(), Disease = col_character(),
`Disease Code` = col_skip(), Gender = col_character(),
`Gender Code` = col_skip(), Notes = col_skip(),
Population = col_integer(), `Race/Ethnicity` = col_character(),
`Race/Ethnicity Code` = col_skip(),
Rate = col_skip(), `STD Cases` = col_integer(),
State = col_character(), `State Code` = col_skip()),
trim_ws = TRUE)
temp = c(which(allDiseaseEthnia$"Gender" == "Unknown"),
which(allDiseaseEthnia$"Age" == "Unknown"),
which(is.na(allDiseaseEthnia$"Population")),
which(allDiseaseEthnia$"Race/Ethnicity" == "Unknown"))
if (length(temp) != 0) #VÃ©rifiyng that the vector isn't empty
{allDiseaseEthnia = allDiseaseEthnia[-c(temp),]}
View(allDiseaseEthnia)
test = allDiseaseEthnia %>% group_by(State) %>% summarise (sum(Population))
test
library(shiny); runApp('server.R')
