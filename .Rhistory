runApp('server.R')
runApp('server.R')
hour
hour()
hour(x)
sys.time()
Sys.time()
runApp('server.R')
temp = Sys.time()
str_replace_all(temp, "[[:punct:]]", " ")
library (stringr)
str_replace_all(temp, "[[:punct:]]", " ")
str_replace_all(temp, "  " ")
str_replace (temp, " ", "")
str_replace_all(temp, "[[:punct:]]", " ")
temp =str_replace_all(temp, "[[:punct:]]", " ")
temp = Sys.time()
temp =str_replace_all(temp, "[[:punct:]]", "")
temp =str_replace_all(temp, "[[:punct:]] ", "")
temp = str_replace_all (temp, " ", "")
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
rm(syphilis, gonorrhea, chlamydia )
View(labels)
allDisease = allDisease %>% mutate (Rateonpop = `STD Cases`*100/Population)
########
allDisease= allDisease %>%  group_by(State) %>%  summarise(sum(`STD Cases`))
allDisease = allDiseasesave
########
allDisease= allDisease %>%  group_by(State) %>%  summarise(sum(`STD Cases`, 'Population'))
########
allDisease= allDisease %>%  group_by(State) %>%  summarise(sum(`Population`))
runApp('server.R')
runApp('server.R')
runApp('server.R')
min(allDiseaseWork$STD_Cases)
max(allDiseaseWork$STD_Cases)
minallDiseaseWork =  min(allDiseaseWork$STD_Cases)
minallDiseaseWork =  min(allDiseaseWork$STD_Cases)
maxallDiseaseWork = max(allDiseaseWork$STD_Cases)
stepLegend = (maxallDiseaseWork - minallDiseaseWork) / 10
legendRow = 0
for (i in 1:10)
{
legendRow = c(legendRow, minallDiseaseWork + stepLegend*i)
}
legendRow = ()
legendRow = c()
for (i in 1:10)
{
legendRow = c(legendRow, minallDiseaseWork + stepLegend*i)
}
legendRow
runApp('server.R')
runApp('server.R')
runApp('server.R')
library(shiny); runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
library(shiny); runApp('server.R')
library(shiny); runApp('server.R')
library(shiny); runApp('server.R')
View(allDisease)
View(allDiseasesave)
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
allDisease = allDiseasesave
allDisease = allDisease %>% filter(Disease == "Primary and Secondary Syphilis") %>%
# filter (`Gender Code`== "F") %>%
filter (Year == "1996") %>%
filter(`Age Code` == "0-14")
View(allDisease)
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
library(shiny); runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
library(readr)
AllDiseaseEthnia <- read_delim("data/Filtered by ethnia/AllDiseaseEthnia.txt",
"\t", escape_double = FALSE, col_types = cols(Age = col_character(),
`Age Code` = col_skip(), Disease = col_character(),
`Disease Code` = col_skip(), Gender = col_character(),
`Gender Code` = col_skip(), Notes = col_skip(),
Population = col_integer(), `Race/Ethnicity` = col_character(),
`Race/Ethnicity Code` = col_skip(),
Rate = col_skip(), `STD Cases` = col_integer(),
State = col_character(), `State Code` = col_skip()),
trim_ws = TRUE)
View(AllDiseaseEthnia)
summary (AllDiseaseEthnia)
summary (AllDiseaseEthnia$Gender)
table (AllDiseaseEthnia$Gender)
library(shiny); runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
contingenceTB =c()
contingenceTB[1,1] = "Rien"
contingenceTB = data.frame ("" = c("First Condition", "Second Condition", "Total"),
"Diseased" = c("", "", ""),
"Non Diseased" =c("", "", ""),
"Total" = c("", "", ""))
runApp('server.R')
contingenceTB = data.frame ("Titles" = c("First Condition", "Second Condition", "Total"),
"Diseased" = c("", "", ""),
"Non Diseased" =c("", "", ""),
"Total" = c("", "", ""))
View(contingenceTB)
runApp('server.R')
varsGender[1:3]
varsGender = c(
"Male" = "Male",
"Female" = "Female",
"None" = "None",
"All" = "All"
)
varsGender[1:3]
runApp('server.R')
varsAge
varsAge = c(
"0-14 years" = "0-14",
"15-19 years" = "15-19",
"20-24 years" = "20-24",
"25-29 years" = "25-29",
"30-34 years" = "30-34",
"35-39 years" = "35-39",
"More than 40 years" = "40+",
"None" = "None",
"All" = "All"
)
runApp('server.R')
library(shiny); runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
varsAge[1:7]
runApp('server.R')
AllDiseaseEthnia = AllDiseaseEthnia <- read_delim("data/Filtered by ethnia/AllDiseaseEthnia.txt",
"\t", escape_double = FALSE, col_types = cols(Age = col_character(),
`Age Code` = col_character(), Disease = col_character(),
`Disease Code` = col_skip(), Gender = col_character(),
`Gender Code` = col_skip(), Notes = col_skip(),
Population = col_integer(), `Race/Ethnicity` = col_character(),
`Race/Ethnicity Code` = col_skip(),
Rate = col_skip(), `STD Cases` = col_integer(),
State = col_character(), `State Code` = col_skip()),
trim_ws = TRUE)
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
AllDiseaseEthnia[1,7]
test =AllDiseaseEthnia[1,7]
View(test)
test = as.numeric(test)
runApp('server.R')
contigenceTB [1,2]
#Building the contingence Table
contingenceTB = data.frame ("Titles" = c("First Condition", "Second Condition", "Total"),
"Diseased" = c("", "", ""),
"Non.Diseased" =c("", "", ""),
"Total" = c("", "", ""))
contigenceTB [1,2]
contingenceTB
contingenceTB[1,2]
as.numeric (contingenceTB[1,2])
as.numeric (contingenceTB[1,2]) = 12
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
temp = c(which(allDiseaseEthnia$"Gender" == "Unknown"),
which(allDiseaseEthnia$"Age" == "Unknown"),
which(is.na(allDiseaseEthnia$"Population")),
which(allDiseaseEthnia$"Race/Ethnicity" == "Unknown"))
if (length(temp) != 0) #Vérifiyng that the vector isn't empty
library(shiny); runApp('server.R')
{allDiseaseEthnia = allDiseaseEthnia[-c(temp),]}
allDiseaseEthnia = allDiseaseEthnia <- read_delim("data/Filtered by ethnia/allDiseaseEthnia.txt",
"\t", escape_double = FALSE, col_types = cols(Age = col_character(),
`Age Code` = col_character(), Disease = col_character(),
`Disease Code` = col_skip(), Gender = col_character(),
`Gender Code` = col_skip(), Notes = col_skip(),
Population = col_integer(), `Race/Ethnicity` = col_character(),
`Race/Ethnicity Code` = col_skip(),
Rate = col_skip(), `STD Cases` = col_integer(),
State = col_character(), `State Code` = col_skip()),
trim_ws = TRUE)
temp = c(which(allDiseaseEthnia$"Gender" == "Unknown"),
which(allDiseaseEthnia$"Age" == "Unknown"),
which(is.na(allDiseaseEthnia$"Population")),
which(allDiseaseEthnia$"Race/Ethnicity" == "Unknown"))
if (length(temp) != 0) #Vérifiyng that the vector isn't empty
{allDiseaseEthnia = allDiseaseEthnia[-c(temp),]}
View(allDiseaseEthnia)
test = allDiseaseEthnia %>% group_by(State) %>% summarise (sum(Population))
test
library(shiny); runApp('server.R')
library(shiny); runApp('server.R')
rm(list(ls()))
ls()
rm(ls())
rm(list = ls())
library (readr)
library (dplyr)
#Creating the inputs
varsDisease = c(
"Chlamydia" = "Chlamydia",
"Gonorrhea" = "Gonorrhea",
"Primary and Secondary Syphilis" = "Primary and Secondary Syphilis",
"All" = "All"
)
varsGender = c(
"Male" = "Male",
"Female" = "Female",
"All" = "All"
)
varsAge = c(
"0-14 years" = "0-14",
"15-19 years" = "15-19",
"20-24 years" = "20-24",
"25-29 years" = "25-29",
"30-34 years" = "30-34",
"35-39 years" = "35-39",
"More than 40 years" = "40+",
"All" = "All"
)
varsEthnia = c(
"American Indian or Alaska Native" = "American Indian",
"Asian or Pacific Islander" = "Asian",
"Black or African American" = "African American",
"Hispanic" = "Hispanic" ,
"White" = "White"
)
#Importing STD data
ChlamydiaF <- read_delim("data/ChlamydiaF.txt",
"\t", escape_double = FALSE, col_types = cols(Age = col_character(),
`Age Code` = col_character(), Disease = col_character(),
`Disease Code` = col_skip(), Notes = col_skip(),
Population = col_integer(), `Race/Ethnicity` = col_character(),
`Race/Ethnicity Code` = col_skip(),
Rate = col_skip(), `STD Cases` = col_integer(),
State = col_character(), `State Code` = col_skip(),
Year = col_integer(), `Year Code` = col_skip()),
trim_ws = TRUE)
ChlamydiaF = ChlamydiaF %>% mutate(Gender = "Female", Gender_Code = "F")
ChlamydiaM <- read_delim("data/ChlamydiaM.txt",
"\t", escape_double = FALSE, col_types = cols(Age = col_character(),
`Age Code` = col_character(), Disease = col_character(),
`Disease Code` = col_skip(), Notes = col_skip(),
Population = col_integer(), `Race/Ethnicity` = col_character(),
`Race/Ethnicity Code` = col_skip(),
Rate = col_skip(), `STD Cases` = col_integer(),
State = col_character(), `State Code` = col_skip(),
Year = col_integer(), `Year Code` = col_skip()),
trim_ws = TRUE)
ChlamydiaM = ChlamydiaM %>% mutate(Gender = "Male", Gender_Code = "M")
ChlamydiaU <- read_delim("data/ChlamydiaU.txt",
"\t", escape_double = FALSE, col_types = cols(Age = col_character(),
`Age Code` = col_character(), Disease = col_character(),
`Disease Code` = col_skip(), Notes = col_skip(),
Population = col_integer(), `Race/Ethnicity` = col_character(),
`Race/Ethnicity Code` = col_skip(),
Rate = col_skip(), `STD Cases` = col_integer(),
State = col_character(), `State Code` = col_skip(),
Year = col_integer(), `Year Code` = col_skip()),
trim_ws = TRUE)
ChlamydiaU = ChlamydiaU %>% mutate(Gender = "Unknown", Gender_Code = "U")
GonorrheaF <- read_delim("data/GonorrheaF.txt",
"\t", escape_double = FALSE, col_types = cols(Age = col_character(),
`Age Code` = col_character(), Disease = col_character(),
`Disease Code` = col_skip(), Notes = col_skip(),
Population = col_integer(), `Race/Ethnicity` = col_character(),
`Race/Ethnicity Code` = col_skip(),
Rate = col_skip(), `STD Cases` = col_integer(),
State = col_character(), `State Code` = col_skip(),
Year = col_integer(), `Year Code` = col_skip()),
trim_ws = TRUE)
GonorrheaF = GonorrheaF %>% mutate(Gender = "Female", Gender_Code = "F")
GonorrheaM <- read_delim("data/GonorrheaM.txt",
"\t", escape_double = FALSE, col_types = cols(Age = col_character(),
`Age Code` = col_character(), Disease = col_character(),
`Disease Code` = col_skip(), Notes = col_skip(),
Population = col_integer(), `Race/Ethnicity` = col_character(),
`Race/Ethnicity Code` = col_skip(),
Rate = col_skip(), `STD Cases` = col_integer(),
State = col_character(), `State Code` = col_skip(),
Year = col_integer(), `Year Code` = col_skip()),
trim_ws = TRUE)
GonorrheaM = GonorrheaM %>% mutate(Gender = "Male", Gender_Code = "M")
GonorrheaU <- read_delim("data/GonorrheaU.txt",
"\t", escape_double = FALSE, col_types = cols(Age = col_character(),
`Age Code` = col_character(), Disease = col_character(),
`Disease Code` = col_skip(), Notes = col_skip(),
Population = col_integer(), `Race/Ethnicity` = col_character(),
`Race/Ethnicity Code` = col_skip(),
Rate = col_skip(), `STD Cases` = col_integer(),
State = col_character(), `State Code` = col_skip(),
Year = col_integer(), `Year Code` = col_skip()),
trim_ws = TRUE)
GonorrheaU = GonorrheaU %>% mutate(Gender = "Unknown", Gender_Code = "U")
SyphilisF <- read_delim("data/SyphilisF.txt",
"\t", escape_double = FALSE, col_types = cols(Age = col_character(),
`Age Code` = col_character(), Disease = col_character(),
`Disease Code` = col_skip(), Notes = col_skip(),
Population = col_integer(), `Race/Ethnicity` = col_character(),
`Race/Ethnicity Code` = col_skip(),
Rate = col_skip(), `STD Cases` = col_integer(),
State = col_character(), `State Code` = col_skip(),
Year = col_integer(), `Year Code` = col_skip()),
trim_ws = TRUE)
SyphilisF = SyphilisF %>% mutate(Gender = "Female", Gender_Code = "F")
SyphilisM <- read_delim("data/SyphilisM.txt",
"\t", escape_double = FALSE, col_types = cols(Age = col_character(),
`Age Code` = col_character(), Disease = col_character(),
`Disease Code` = col_skip(), Notes = col_skip(),
Population = col_integer(), `Race/Ethnicity` = col_character(),
`Race/Ethnicity Code` = col_skip(),
Rate = col_skip(), `STD Cases` = col_integer(),
State = col_character(), `State Code` = col_skip(),
Year = col_integer(), `Year Code` = col_skip()),
trim_ws = TRUE)
SyphilisM = SyphilisM %>% mutate(Gender = "Male", Gender_Code = "M")
SyphilisU <- read_delim("data/SyphilisU.txt",
"\t", escape_double = FALSE, col_types = cols(Age = col_character(),
`Age Code` = col_character(), Disease = col_character(),
`Disease Code` = col_skip(), Notes = col_skip(),
Population = col_integer(), `Race/Ethnicity` = col_character(),
`Race/Ethnicity Code` = col_skip(),
Rate = col_skip(), `STD Cases` = col_integer(),
State = col_character(), `State Code` = col_skip(),
Year = col_integer(), `Year Code` = col_skip()),
trim_ws = TRUE)
SyphilisU = SyphilisU %>% mutate(Gender = "Unknown",Gender_Code = "U")
#Combining all the data in one DT for the map
STD = bind_rows (ChlamydiaF, ChlamydiaM, ChlamydiaU, GonorrheaF, GonorrheaM, GonorrheaU, SyphilisF, SyphilisM, SyphilisU)
rm (ChlamydiaF, ChlamydiaM, ChlamydiaU, GonorrheaF, GonorrheaM, GonorrheaU, SyphilisF, SyphilisM, SyphilisU) #Closing the old tables
colnames (STD) = c("Disease", "State", "Year", "Race/Ethnicity", "Age", "Age_Code", "STD_Cases", "Population", "Gender", "Gender_Code")
#Janitoring the data
temp = which (is.na(STD$"Population"))
if (length(temp) != 0) #Vérifiyng that the vector isn't empty
{STD = STD[-c(temp),]}
write.csv(STD, "STD.csv")
saveRDS(STD, "STD.rds")
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
runApp('server.R')
legendRow
STD1 = STD
# Creating two new DT : one to summarise the cases and one to summarise the population
STD1Cases = STD1 %>% group_by(State) %>% summarise(STD_Cases = sum(STD_Cases))
STD1Pop = STD1 %>% group_by(State) %>% summarise (Population = sum(Population))
#Setting the old work as the new base for the cases
STD1 = STD1Cases
rm(STD1Cases)
#Creating the rates in the working table
STD1 = STD1 %>% mutate (RateCalc = STD1$STD_Cases * 1000 / STD1Pop$Population)
rm(STD1Pop)
states <- geojsonio::geojson_read("geojson/us-states.json", what = "sp")
temp = states$name
temp2 = STD1$State
#Initializing the 3 variables used in the loop
i=1 #Representing the position in the states list
j=1 #Representing the position in our selection list
temp3 = c() #Generating a vector with all of the informations in our list
temp4 = c() #Generating a vector with the rates
while (i < 53)
{
if(!is.na(temp [i] == temp2[j])) { #Avoid the error with NA values
if (temp [i] == temp2[j])
{
temp3 = c(temp3,STD1[j,"RateCalc"]) #Saving the value in a vector
temp4 = c(temp4, STD1[j, "STD_Cases"])
i = i+1 #Next step on the state list
j = j+1 #Next step on our selection list
}
}
if(temp [i] != temp2[j] |is.na(temp [i] != temp2[j]))
{
temp3 = c(temp3, 0) #If the state isn't in our filtered list, it has 0 people with the disease
temp4 = c(temp4, 0)
i =i+1 #Next step of the state list
}
}
temp3 =unlist(temp3, use.names=FALSE)
## Preparing the legend
maxSTD1 = max(STD1$RateCalc)
stepLegend = (maxSTD1 / 9)
legendRow = c(0)
for (i in 1:9)
{
legendRow = c(legendRow, 0 + stepLegend*i)
}
legendRow[9]
legendRow[9] = legendRow[9] + 0.05
legendRow[9] = legendRow[9] + 0.05
legendRow[9]
runApp('server.R')
legendRow
runApp('server.R')
